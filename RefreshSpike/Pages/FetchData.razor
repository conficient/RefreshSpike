@page "/fetchdata"
@implements IDisposable
@using RefreshSpike.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr class="@GetCSS(forecast)">
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        // load initial forecasts
        forecasts = await ForecastService.GetForecastAsync();
        // subscribe to events
        ForecastService.OnForecastChanged += HandleChange;
    }

    // set to date of last modified
    DateTime? lastUpdated;

    /// <summary>
    /// Show last updated with different colour to make it easier to see
    /// </summary>
    /// <param name="forecast"></param>
    /// <returns></returns>
    string GetCSS(WeatherForecast forecast)
    {
        if (lastUpdated.HasValue && lastUpdated.Value == forecast.Date)
            return "table-success"; // Boostrap4 green background
        return null;
    }

    /// <summary>
    /// Handle a 
    /// </summary>
    /// <param name="forecast"></param>
    private void HandleChange(WeatherForecast forecast)
    {
        // find match and replace it
        var index = GetIndexOfDate(forecast.Date);
        if (index > 0)
        {
            // make CSS show which got updated
            lastUpdated = forecast.Date;
            forecasts[index] = forecast;
            // notify Blazor to redraw
            // need to use InvokeAsync as the thread may be different
            InvokeAsync(StateHasChanged);
        }
    }

    int GetIndexOfDate(DateTime date)
    {
        for (int i = 0; i < forecasts.Length; i++)
        {
            if (forecasts[i].Date == date) return i;
        }
        return -1;
    }

    void IDisposable.Dispose()
    {
        // stop listening
        ForecastService.OnForecastChanged -= HandleChange;
    }
}
